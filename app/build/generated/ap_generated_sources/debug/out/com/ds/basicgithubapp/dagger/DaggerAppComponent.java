// Generated by Dagger (https://google.github.io/dagger).
package com.ds.basicgithubapp.dagger;

import android.app.Activity;
import android.app.Application;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import com.ds.basicgithubapp.repo.api.retrofit.GithubRepoService;
import com.ds.basicgithubapp.repo.room.GithubDAO;
import com.ds.basicgithubapp.repo.room.GithubRoomDatabase;
import com.ds.basicgithubapp.view.GithubActivity;
import com.ds.basicgithubapp.view.GithubActivity_MembersInjector;
import com.ds.basicgithubapp.view.GithubRepoDetailFragment;
import com.ds.basicgithubapp.view.GithubRepoListFragment;
import com.ds.basicgithubapp.view.GithubRepoListFragment_MembersInjector;
import com.ds.basicgithubapp.viewmodel.GithubRepoViewModel;
import com.ds.basicgithubapp.viewmodel.GithubRepoViewModel_Factory;
import com.ds.basicgithubapp.viewmodel.ViewModelFactory;
import com.ds.basicgithubapp.viewmodel.ViewModelFactory_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityModule_ContributeGithubActivity.GithubActivitySubcomponent.Builder>
      githubActivitySubcomponentBuilderProvider;

  private Provider<Application> applicationProvider;

  private Provider<GithubRoomDatabase> provideGithubRoomDatabaseProvider;

  private Provider<GithubDAO> provideGithubDAOProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<GithubRepoService> provideGithubRepoServiceProvider;

  private GithubRepoViewModel_Factory githubRepoViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private Provider<
          FragmentModule_ContributeGithubRepoListFragment.GithubRepoListFragmentSubcomponent
              .Builder>
      githubRepoListFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentModule_ContributeGithubRepoDetailFragment.GithubRepoDetailFragmentSubcomponent
              .Builder>
      githubRepoDetailFragmentSubcomponentBuilderProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(
                GithubActivity.class, (Provider) githubActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<? extends Activity>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.githubActivitySubcomponentBuilderProvider =
        new Provider<ActivityModule_ContributeGithubActivity.GithubActivitySubcomponent.Builder>() {
          @Override
          public ActivityModule_ContributeGithubActivity.GithubActivitySubcomponent.Builder get() {
            return new GithubActivitySubcomponentBuilder();
          }
        };
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideGithubRoomDatabaseProvider =
        DoubleCheck.provider(
            GithubRoomDBModule_ProvideGithubRoomDatabaseFactory.create(
                builder.githubRoomDBModule, applicationProvider));
    this.provideGithubDAOProvider =
        DoubleCheck.provider(
            GithubRoomDBModule_ProvideGithubDAOFactory.create(
                builder.githubRoomDBModule, provideGithubRoomDatabaseProvider));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            GithubApiModule_ProvideRetrofitFactory.create(builder.githubApiModule));
    this.provideGithubRepoServiceProvider =
        DoubleCheck.provider(
            GithubApiModule_ProvideGithubRepoServiceFactory.create(
                builder.githubApiModule, provideRetrofitProvider));
    this.githubRepoViewModelProvider =
        GithubRepoViewModel_Factory.create(
            applicationProvider, provideGithubDAOProvider, provideGithubRepoServiceProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1)
            .put(GithubRepoViewModel.class, (Provider) githubRepoViewModelProvider)
            .build();
    this.viewModelFactoryProvider =
        DoubleCheck.provider(
            ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
    this.githubRepoListFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentModule_ContributeGithubRepoListFragment.GithubRepoListFragmentSubcomponent
                .Builder>() {
          @Override
          public FragmentModule_ContributeGithubRepoListFragment.GithubRepoListFragmentSubcomponent
                  .Builder
              get() {
            return new GithubRepoListFragmentSubcomponentBuilder();
          }
        };
    this.githubRepoDetailFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentModule_ContributeGithubRepoDetailFragment.GithubRepoDetailFragmentSubcomponent
                .Builder>() {
          @Override
          public FragmentModule_ContributeGithubRepoDetailFragment
                  .GithubRepoDetailFragmentSubcomponent.Builder
              get() {
            return new GithubRepoDetailFragmentSubcomponentBuilder();
          }
        };
  }

  @Override
  public void inject(GithubAppController githubAppController) {
    injectGithubAppController(githubAppController);
  }

  private GithubAppController injectGithubAppController(GithubAppController instance) {
    GithubAppController_MembersInjector.injectDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private GithubRoomDBModule githubRoomDBModule;

    private GithubApiModule githubApiModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (githubRoomDBModule == null) {
        this.githubRoomDBModule = new GithubRoomDBModule();
      }
      if (githubApiModule == null) {
        this.githubApiModule = new GithubApiModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class GithubActivitySubcomponentBuilder
      extends ActivityModule_ContributeGithubActivity.GithubActivitySubcomponent.Builder {
    private GithubActivity seedInstance;

    @Override
    public ActivityModule_ContributeGithubActivity.GithubActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(GithubActivity.class.getCanonicalName() + " must be set");
      }
      return new GithubActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(GithubActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class GithubActivitySubcomponentImpl
      implements ActivityModule_ContributeGithubActivity.GithubActivitySubcomponent {
    private GithubActivitySubcomponentImpl(GithubActivitySubcomponentBuilder builder) {}

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(2)
          .put(
              GithubRepoListFragment.class,
              (Provider) DaggerAppComponent.this.githubRepoListFragmentSubcomponentBuilderProvider)
          .put(
              GithubRepoDetailFragment.class,
              (Provider)
                  DaggerAppComponent.this.githubRepoDetailFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<? extends Fragment>>>emptyMap());
    }

    @Override
    public void inject(GithubActivity arg0) {
      injectGithubActivity(arg0);
    }

    private GithubActivity injectGithubActivity(GithubActivity instance) {
      GithubActivity_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      GithubActivity_MembersInjector.injectDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }
  }

  private final class GithubRepoListFragmentSubcomponentBuilder
      extends FragmentModule_ContributeGithubRepoListFragment.GithubRepoListFragmentSubcomponent
          .Builder {
    private GithubRepoListFragment seedInstance;

    @Override
    public FragmentModule_ContributeGithubRepoListFragment.GithubRepoListFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            GithubRepoListFragment.class.getCanonicalName() + " must be set");
      }
      return new GithubRepoListFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(GithubRepoListFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class GithubRepoListFragmentSubcomponentImpl
      implements FragmentModule_ContributeGithubRepoListFragment
          .GithubRepoListFragmentSubcomponent {
    private GithubRepoListFragmentSubcomponentImpl(
        GithubRepoListFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(GithubRepoListFragment arg0) {
      injectGithubRepoListFragment(arg0);
    }

    private GithubRepoListFragment injectGithubRepoListFragment(GithubRepoListFragment instance) {
      GithubRepoListFragment_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class GithubRepoDetailFragmentSubcomponentBuilder
      extends FragmentModule_ContributeGithubRepoDetailFragment.GithubRepoDetailFragmentSubcomponent
          .Builder {
    private GithubRepoDetailFragment seedInstance;

    @Override
    public FragmentModule_ContributeGithubRepoDetailFragment.GithubRepoDetailFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            GithubRepoDetailFragment.class.getCanonicalName() + " must be set");
      }
      return new GithubRepoDetailFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(GithubRepoDetailFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class GithubRepoDetailFragmentSubcomponentImpl
      implements FragmentModule_ContributeGithubRepoDetailFragment
          .GithubRepoDetailFragmentSubcomponent {
    private GithubRepoDetailFragmentSubcomponentImpl(
        GithubRepoDetailFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(GithubRepoDetailFragment arg0) {}
  }
}
